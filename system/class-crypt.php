<?php
define('INC', true);
class SimpleCrypt {

	private $chars = array(

		'a' => '001', 'A' => '028',  1  => '053', '`' => '080',
		'b' => '002', 'B' => '029',  2  => '054', '{' => '081',
		'c' => '003', 'C' => '030',  3  => '055', '}' => '082',
		'd' => '004', 'D' => '031',  4  => '056', '[' => '083',
		'e' => '005', 'E' => '032',  5  => '057', ']' => '084',
		'f' => '006', 'F' => '033',  6  => '058', 'ª' => '085',
		'g' => '007', 'G' => '034',  7  => '059', 'º' => '086',
		'h' => '008', 'H' => '035',  8  => '060', '^' => '087',
		'i' => '009', 'I' => '036',  9  => '061', '~' => '088',
		'j' => '010', 'J' => '037', '"' => '062', '<' => '089',
		'k' => '010', 'K' => '038', '!' => '063', '>' => '090',
		'l' => '012', 'L' => '039', '@' => '064', ',' => '091',
		'm' => '013', 'M' => '040', '#' => '065', '.' => '092',
		'n' => '014', 'N' => '040', '$' => '066', ':' => '093',
		'o' => '015', 'O' => '041', '%' => '067', ';' => '094',
		'p' => '016', 'P' => '042', '¨' => '068', '/' => '095',
		'q' => '017', 'Q' => '043', '&' => '069', '?' => '096',
		'r' => '018', 'R' => '044', '*' => '070', '°' => '097',
		's' => '019', 'S' => '045', '(' => '071', '|' => '098',
		't' => '020', 'T' => '046', ')' => '072', "\\" => '099',
		'u' => '021', 'U' => '047', '-' => '073', '¹' => '100',
		'v' => '022', 'V' => '048', '_' => '074', '²' => '101',
		'w' => '023', 'W' => '049', '+' => '075', '³' => '102',
		'x' => '024', 'X' => '050', '=' => '076', '£' => '103',
		'y' => '025', 'Y' => '051', '§' => '078', '¢' => '104',
		'z' => '026', 'Z' => '052', '´' => '079', '¬' => '105',
		' ' => '027',
                
         0 => '169',

		'À' => '106', 'Á' => '117', 'Â' => '128', 'Ã' => '139', 'Ä' => '149', 'Å' => '159',
		'Æ' => '107', 'Ç' => '118', 'È' => '129', 'É' => '140', 'Ê' => '150', 'Ë' => '160',
		'Ì' => '108', 'Í' => '119', 'Î' => '130', 'Ï' => '141', 'Ð' => '151', 'Ñ' => '161',
		'Ò' => '109', 'Ó' => '120', 'Ô' => '131', 'Õ' => '142', 'Ö' => '152', 'Ø' => '162',
		'Ù' => '110', 'Ú' => '121', 'Û' => '132', 'Ü' => '143', 'Ý' => '153', 'Ŕ' => '163',
		'Þ' => '111', 'ß' => '122', 'à' => '133', 'á' => '144', 'â' => '154', 'ã' => '164',
		'ä' => '112', 'å' => '123', 'æ' => '134', 'ç' => '145', 'è' => '155', 'é' => '165',
		'ê' => '113', 'ë' => '124', 'ì' => '135', 'í' => '146', 'î' => '156', 'ï' => '166',
		'ð' => '114', 'ñ' => '125', 'ò' => '136', 'ó' => '147', 'ô' => '157', 'õ' => '167',
		'ö' => '115', 'ø' => '126', 'ù' => '137', 'ú' => '148', 'û' => '158', 'ý' => '168',
		'þ' => '116', 'ÿ' => '127', 'ŕ' => '138'

		);

	public function encode( $txt = NULL) {

		if ( $txt == NULL ) return false;

		$txt = $this->str_split_unicode($txt);

		$resultTxt = '';

		foreach ( $txt as $key => $value ) {
			$resultTxt .= $this->chars[$value];
		}

		return strrev($resultTxt);

	}

	public function decode( $code = NULL ) {

		if ( $code == NULL ) return false;

		$code = $this->str_split_unicode(strrev($code), 3);

		$resultTxt = '';

		foreach ( $code as $key => $value ) {
			$resultTxt .= array_search($value, $this->chars);
		}

		return $resultTxt;

	}

	private function str_split_unicode($str, $l = 0) {
	    if ($l > 0) {
	        $ret = array();
	        $len = mb_strlen($str, "UTF-8");
	        for ($i = 0; $i < $len; $i += $l) {
	            $ret[] = mb_substr($str, $i, $l, "UTF-8");
	        }
	        return $ret;
	    }
	    return preg_split("//u", $str, -1, PREG_SPLIT_NO_EMPTY);
	}


}
?>